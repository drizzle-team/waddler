name: Release (latest)

on: workflow_dispatch

jobs:
  test:
    runs-on: ubuntu-22.04
    services:
      singlestore:
        image: ghcr.io/singlestore-labs/singlestoredb-dev:latest
        env:
          ROOT_PASSWORD: singlestore
        ports:
          - 33307:3306
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '22'
          registry-url: 'https://registry.npmjs.org'

      - uses: pnpm/action-setup@v3
        name: Install pnpm
        id: pnpm-install
        with:
          version: latest
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v4
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Build
        run: pnpm build

      - name: Run tests
        env:
          NEON_HTTP_CONNECTION_STRING: ${{secrets.NEON_HTTP_CONNECTION_STRING}}
          NEON_SERVERLESS_CONNECTION_STRING: ${{secrets.NEON_SERVERLESS_CONNECTION_STRING}}

          VERCEL_POOL_CONNECTION_STRING: ${{secrets.VERCEL_POOL_CONNECTION_STRING}}
          VERCEL_CLIENT_CONNECTION_STRING: ${{secrets.VERCEL_CLIENT_CONNECTION_STRING}}

          XATA_API_KEY: ${{secrets.XATA_API_KEY}}
          XATA_BRANCH: ${{secrets.XATA_BRANCH}}

          LIBSQL_REMOTE_URL: ${{secrets.LIBSQL_REMOTE_URL}}
          LIBSQL_REMOTE_TOKEN: ${{secrets.LIBSQL_REMOTE_TOKEN}}

          TIDB_CONNECTION_STRING: ${{secrets.TIDB_CONNECTION_STRING}}

          PLANETSCALE_CONNECTION_STRING: ${{secrets.PLANETSCALE_CONNECTION_STRING}}
        working-directory: integration-tests
        # We need to decide on instances we are going to use in CI/CD for each dialect
        run: |
          pnpm test

  attw:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '22'
          registry-url: 'https://registry.npmjs.org'

      - uses: pnpm/action-setup@v3
        name: Install pnpm
        id: pnpm-install
        with:
          version: latest
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v4
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Install Bun
        uses: oven-sh/setup-bun@v2

      - name: Check preconditions
        id: checks
        shell: bash
        working-directory: waddler
        run: |
          latest="$(npm view --json waddler dist-tags.latest | jq -r)"
          version="$(jq -r .version package.json)"
          is_version_published="$(npm view waddler versions --json | jq -r '.[] | select(. == "'$version'") | . == "'$version'"')"

          if [[ "$is_version_published" == "false" && "$latest" != "$version" ]]; then
            {
              echo "version=$version"
              echo "has_new_release=true"
              echo "changelog_path=$changelogPath"
            } >> $GITHUB_OUTPUT
          fi

      - name: Build
        if: steps.checks.outputs.has_new_release == 'true'
        run: pnpm build
      
      - name: Pack
        if: steps.checks.outputs.has_new_release == 'true'
        working-directory: waddler
        run: npm run pack
  
      - name: Run @arethetypeswrong/cli
        if: steps.checks.outputs.has_new_release == 'true'
        working-directory: waddler
        run: bunx attw package.tgz --profile node16

  release:
    permissions: write-all
    needs:
      - test
      - attw
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '22'
          registry-url: 'https://registry.npmjs.org'

      - uses: pnpm/action-setup@v3
        name: Install pnpm
        id: pnpm-install
        with:
          version: latest
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v4
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Check preconditions
        id: checks
        shell: bash
        working-directory: waddler
        run: |
          latest="$(npm view --json waddler dist-tags.latest | jq -r)"
          version="$(jq -r .version package.json)"
          is_version_published="$(npm view waddler versions --json | jq -r '.[] | select(. == "'$version'") | . == "'$version'"')"

          if [[ "$is_version_published" == "true" ]]; then
            echo "\`waddler@$version\` already published, adding tag \`latest\`" >> $GITHUB_STEP_SUMMARY
            npm dist-tag add waddler@$version latest
          elif [[ "$latest" != "$version" ]]; then
            echo "Latest:  $latest"
            echo "Current: $version"

            changelogPath=$(node -e "console.log(require('path').resolve('..', 'changelogs', 'waddler', '$version.md'))")
            if [[ ! -f "$changelogPath" ]]; then
              echo "::error::Changelog for version $version not found: $changelogPath"
              exit 1
            fi

            {
              echo "version=$version"
              echo "has_new_release=true"
              echo "changelog_path=$changelogPath"
            } >> $GITHUB_OUTPUT
          else
            echo "Already up to date: $version"
            echo "\`$version\` is already latest on NPM" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Build
        if: steps.checks.outputs.has_new_release == 'true'
        run: pnpm build

      - name: Pack
        if: steps.checks.outputs.has_new_release == 'true'
        working-directory: waddler
        shell: bash
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_ACCESS_TOKEN }}
        run: npm run pack

      - name: Publish
        if: steps.checks.outputs.has_new_release == 'true'
        working-directory: waddler
        shell: bash
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_ACCESS_TOKEN }}
        run: |
          version="${{ steps.checks.outputs.version }}"

          echo "Publishing waddler@$version"
          npm run publish

          echo "npm: \`+ waddler@$version\`" >> $GITHUB_STEP_SUMMARY

          # Post release message to Discord
          # curl -X POST -H "Content-Type: application/json" -d "{\"embeds\": [{\"title\": \"New \`waddler\` release! ðŸŽ‰\", \"url\": \"https://www.npmjs.com/package/waddler\", \"color\": \"12907856\", \"fields\": [{\"name\": \"Tag\", \"value\": \"\`$tag\`\"}]}]}" ${{ secrets.DISCORD_RELEASE_WEBHOOK_URL }}

      - name: Create GitHub release
        uses: actions/github-script@v6
        if: steps.checks.outputs.has_new_release == 'true'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              const fs = require("fs");
              const path = require("path");

              const version = "${{ steps.checks.outputs.version }}";
              const changelog = fs.readFileSync("${{ steps.checks.outputs.changelog_path }}", "utf8");

              const release = await github.rest.repos.createRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag_name: `${version}`,
                name: `${version}`,
                body: changelog,
              });

              await github.rest.repos.uploadReleaseAsset({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: release.data.id,
                name: `${{ matrix.package }}-${version}-dist.tgz`,
                data: fs.readFileSync(path.resolve("${{ matrix.package }}", "package.tgz")),
              });
            } catch (e) {
              core.setFailed(e.message);
            }